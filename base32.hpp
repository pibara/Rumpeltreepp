//  Copyright (c) 2012, Rob J Meijer
//
//Permission is hereby granted, free of charge, to any person or organization
//obtaining a copy of the software and accompanying documentation covered by
//this license (the "Software") to use, reproduce, display, distribute,
//execute, and transmit the Software, and to prepare derivative works of the
//Software, and to permit third-parties to whom the Software is furnished to
//do so, all subject to the following:
//
//The copyright notices in the Software and this entire statement, including
//the above license grant, this restriction and the following disclaimer,
//must be included in all copies of the Software, in whole or in part, and
//all derivative works of the Software, unless such copies or derivative
//works are solely in the form of machine-executable object code generated by
//a source language processor.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//DEALINGS IN THE SOFTWARE.
#ifndef _BASE32_HPP
#define _BASE32_HPP
#include <string>
#include "rumpelstiltskin.hpp"
template <int Len>
rumpelstiltskin::string b32encode(const unsigned char *binary);

template <>
rumpelstiltskin::string b32encode<5>(const unsigned char *binary);

template <>
rumpelstiltskin::string b32encode<0>(const unsigned char *binary);

template <>
rumpelstiltskin::string b32encode<1>(const unsigned char *binary);

template <>
rumpelstiltskin::string b32encode<2>(const unsigned char *binary);

template <>
rumpelstiltskin::string b32encode<3>(const unsigned char *binary);

template <>
rumpelstiltskin::string b32encode<4>(const unsigned char *binary);

template <int Len>
rumpelstiltskin::string b32encode(const unsigned char *binary) {
  return b32encode<5>(binary) + b32encode<Len - 5>(binary+5);
};

template <int Len>
void b32decode(rumpelstiltskin::string const & input,unsigned char *binary);

template <>
void b32decode<0>(rumpelstiltskin::string const &input,unsigned char *binary);

template <>
void b32decode<1>(rumpelstiltskin::string const & input,unsigned char *binary);

template <>
void b32decode<2>(rumpelstiltskin::string const & input,unsigned char *binary);

template <>
void b32decode<3>(rumpelstiltskin::string const & input,unsigned char *binary);

template <>
void b32decode<4>(rumpelstiltskin::string const & input,unsigned char *binary);

template <>
void b32decode<5>(rumpelstiltskin::string const & input,unsigned char *binary);

template <>
void b32decode<6>(rumpelstiltskin::string const & input,unsigned char *binary);

template <>
void b32decode<7>(rumpelstiltskin::string const & input,unsigned char *binary);

template <>
void b32decode<8>(rumpelstiltskin::string const & input,unsigned char *binary);

template <int Len>
void b32decode(rumpelstiltskin::string const & input,unsigned char *binary) {
    b32decode<8>(input,binary);
    b32decode<Len - 8>(input.substr(8,input.size()-8),binary + 5);
}

#endif
